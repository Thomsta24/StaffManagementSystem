@implements IDisposable

@if (allState.ShowUser)
{
    <div class="container mt-5">
        <div class="row">
            <div class="col-lg-12">
                <div class="card">
                    <div class="card-header" style="max-height: 580px; overflow-x: hidden; overflow-y:scroll">
                        <h4 class="float-start">Manage Users</h4>
                    </div>
                    <div class="card-body">
                        <table class="table table-striped">
                            <thead>
                                <tr>
                                    <th scope="col">#</th>
                                    <th scope="col">Id</th>
                                    <th scope="col">Name</th>
                                    <th scope="col">Email</th>
                                    <th scope="col">Role</th>
                                    <th scope="col">Action</th>
                                </tr>
                            </thead>
                            <tbody>
                                @if (ManageUsers != null)
                                {
                                    int count = 1;
                                    foreach (var item in ManageUsers)
                                    {
                                        <tr>
                                            <th scope="row">@count</th>
                                            <td>@item.UserId</td>
                                            <td>@item.Name</td>
                                            <td>@item.Email</td>
                                            <td>@item.Role</td>
                                            <td>
                                                <i class="bi bi-pencil text-info cursorStyle" style="margin-right: 5px" @onclick="() => EditClicked(item)"></i>
                                                <i class="bi bi-trash text-danger cursorStyle" @onclick="() => DeleteClicked(item)"></i>
                                            </td>
                                        </tr>
                                        count++;
                                    }
                                }
                                else
                                {
                                    <tr>
                                        <td colspan="4"><div class="alert alert-info text-center">No user registered yet!</div></td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
<UserDialog @ref="userDialog" HandleSaveOperationEvent="HandleSaveOperationEvent" ManageUser="ManageUser" SystemRoles="SystemRoles" />
@code {
    UserDialog? userDialog;
    ManageUser ManageUser = new();
    ManageUser tempManageUser;
    public List<ManageUser> ManageUsers { get; set; } = new();
    public List<SystemRole> SystemRoles { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await GetUsers();
        await GetRoles();
        allState.Action += StateHasChanged;
    }

    private async Task GetUsers()
    {
        ManageUsers = await accountService.GetUsers();
    }

    private async Task GetRoles()
    {
        SystemRoles = await accountService.GetRoles();
    }

    void OpenDialog(ManageUser user)
    {
        tempManageUser = user;
        ManageUser = new ManageUser(user);

        userDialog?.OpenDialog();
    }

    private async Task HandleSaveOperationEvent(ManageUser user)
    {
        var result = await accountService.UpdateUser(user);
        bool successCheck = await DisplayMessage(result.Flag, result.Message);
        if (successCheck)
        {
            ManageUser = new();
            await GetUsers();
        }
    }

    private void EditClicked(ManageUser user)
    {
        ManageUser = user;
        OpenDialog(user);
    }

    private async Task DeleteClicked(ManageUser user)
    {
        bool confirm = await dialogService.ConfirmAsync($"Are you sure you wanna delete {user.Name}?", "Confirm delete");
        if (!confirm) return;

        var response = await accountService.DeleteUser(user.UserId);
        if (await DisplayMessage(response.Flag, response.Message))
            await GetUsers();
    }

    private async Task<bool> DisplayMessage(bool flag, string message)
    {
        if (flag)
        {
            await dialogService.AlertAsync(message, "Success Operation");
            return true;
        }
        else
        {
            await dialogService.AlertAsync(message, "Alert!");
            return false;
        }
    }

    public void Dispose()
    {
        ManageUser = new();
        allState.Action -= StateHasChanged;
    }
}
