@implements IDisposable

@if (allState.ShowGeneralDepartment)
{
    <div class="container mt-5">
        <div class="row">
            <div class="col-lg-12">
                <div class="card">
                    <div class="card-header" style="max-height: 580px; overflow-x: hidden; overflow-y:scroll">
                        <h4 class="float-start">General Departments</h4>
                        <button class="btn btn-outline-success float-end" @onclick="() => OpenDialog(false)">
                            <i class="bi bi-plus-circle-dotted"></i> Add Department
                        </button>
                    </div>
                    <div class="card-body">
                        <table class="table table-striped">
                            <thead>
                                <tr>
                                    <th scope="col">#</th>
                                    <th scope="col">Id</th>
                                    <th scope="col">General Department</th>
                                    <th scope="col">Action</th>
                                </tr>
                            </thead>
                            <tbody>
                                @if(GeneralDepartments != null)
                                {
                                    int count = 1;
                                    foreach(var item in GeneralDepartments)
                                    {
                                        <tr>
                                            <th scope="row">@count</th>
                                            <td>@item.Id</td>
                                            <td>@item.Name</td>
                                            <td>
                                                <i class="bi bi-pencil text-info cursorStyle" style="margin-right: 5px" @onclick="() => EditClicked(item)"></i>
                                                <i class="bi bi-trash text-danger cursorStyle" @onclick="() => DeleteClicked(item)"></i>
                                            </td>
                                        </tr>
                                        count++;
                                    }
                                }
                                else
                                {
                                    <tr>
                                        <td colspan="4"><div class="alert alert-info text-center">No general departments added yet!</div></td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<GeneralDepartmentDialog @ref="generalDepartmentDialog" HandleSaveOperationEvent="HandleSaveOperationEvent" GeneralDepartment="GeneralDepartment" />
@code{
    GeneralDepartmentDialog? generalDepartmentDialog;
    GeneralDepartment GeneralDepartment = new();
    GeneralDepartment tempGeneralDepartment;
    public string Title { get; set; } = "Add";
    public List<GeneralDepartment> GeneralDepartments { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await GetGeneralDepartments();
        allState.Action += StateHasChanged;
    }

    private async Task GetGeneralDepartments()
    {
        GeneralDepartments = await generalDepartmentService.GetAll(Constants.GeneralDepartmentBaseUrl);
    }

    void OpenDialog(bool isEdit = false, GeneralDepartment? department = null)
    {
        if (isEdit && department != null)
        {
            tempGeneralDepartment = department;
            GeneralDepartment = new GeneralDepartment(department);
            generalDepartmentDialog?.ChangeTitle("Update");
        }
        else
        {
            GeneralDepartment = new();
            generalDepartmentDialog?.ChangeTitle("Add");
        }

        generalDepartmentDialog?.OpenDialog();
    }

    private async Task HandleSaveOperationEvent(GeneralDepartment generalDepartment)
    {
        bool successCheck = false;
        if(generalDepartment.Id > 0)
        {
            var result = await generalDepartmentService.Update(generalDepartment, Constants.GeneralDepartmentBaseUrl);
            successCheck = await DisplayMessage(result.Flag, result.Message);
        }
        else
        {
            var response = await generalDepartmentService.Insert(generalDepartment, Constants.GeneralDepartmentBaseUrl);
            successCheck = await DisplayMessage(response.Flag, response.Message);
        }

        if (successCheck)
        {
            GeneralDepartment = new();
            await GetGeneralDepartments();
            generalDepartmentDialog?.ChangeTitle("Add");
        }
    }

    private void EditClicked(GeneralDepartment dep)
    {
        generalDepartmentDialog?.ChangeTitle("Update");
        GeneralDepartment = dep;
        OpenDialog(true, dep);
    }

    private async Task DeleteClicked(GeneralDepartment dep)
    {
        bool confirm = await dialogService.ConfirmAsync($"Are you sure you wanna delete {dep.Name}?", "Confirm delete");
        if (!confirm) return;

        var response = await generalDepartmentService.DeleteById(dep.Id, Constants.GeneralDepartmentBaseUrl);
        if (await DisplayMessage(response.Flag, response.Message))
            await GetGeneralDepartments();
    }

    private async Task<bool> DisplayMessage(bool flag, string message)
    {
        if (flag)
        {
            await dialogService.AlertAsync(message, "Success Operation");
            return true;
        }
        else
        {
            await dialogService.AlertAsync(message, "Alert!");
            return false;
        }
    }

    public void Dispose()
    {
        GeneralDepartment = new();
        generalDepartmentDialog?.ChangeTitle("Add");
        allState.Action -= StateHasChanged;
    }
}